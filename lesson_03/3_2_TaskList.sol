
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract TaskList {
    uint8 count;
    uint8 openCount;
    struct task{
        string taskName;
        uint32 timestamp;
        bool completed;
    }


    mapping (uint8=>task) tasks;

    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();
    }

    modifier checkOwnerAndAccept {
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();
        _;
    }
    
    function addTask(string name) public checkOwnerAndAccept {
        count++;
        openCount++;

        tasks[count].taskName = name;
        tasks[count].timestamp = now;
        tasks[count].completed = false;
    }

    function getOpenTaskCount() public checkOwnerAndAccept view returns (int){
        return openCount;
    }

    function getTaskList() public checkOwnerAndAccept view returns (string [] taskList){
        string[] temp = new string[](count);

        for (uint8 i = 1; i <= count; i++) {
            temp[i - 1] = tasks[i].taskName;
        }
    }

    function getTaskName(uint8 key) public checkOwnerAndAccept view returns (string){
        return tasks[key].taskName;
    }

    function deleteTask(uint8 key) public checkOwnerAndAccept {
        if (!tasks[key].completed){
            openCount--;
        }

        delete tasks[key];
    }

    function completeTask(uint8 key) public checkOwnerAndAccept {
        openCount--;
        tasks[key].completed = true;
    }
}

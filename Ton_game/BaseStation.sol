
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

import "GameObject.sol";

interface GameUnit {
    function deathByBaseDestruction(address attacker) external;
}

contract BaseStation is GameObject{
    GameUnit[] unitArray;
    
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();

        health = 10;
        defence = 2;
    }

    function addUnit(GameUnit unitAddress) public {
        tvm.accept();
        unitArray.push(unitAddress);
    }

    function removeUnit(GameUnit unitAddress) public {
        tvm.accept();
        uint index;
        bool flag = false;

        for (uint i = 0; i < unitArray.length; i++) {
            if (unitArray[i] == unitAddress) {
                index = i;
                flag = false;
                break;
            }
        }
        require(flag, 101);

        for (uint i = index; i < unitArray.length - 1; i++) {
            unitArray[i] = unitArray[i+1];
        }

        unitArray.pop();
    }

    
    function resolveDeath(address attacker) override internal {
        tvm.accept();

        for (uint i = 0; i < unitArray.length; i++) {
            unitArray[i].deathByBaseDestruction(attacker);
        }

        sendTransactionAllAndDestroy(attacker);
    }
}
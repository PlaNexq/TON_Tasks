
/*
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */

pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

import "../Debot.sol";
import "../Terminal.sol";
import "../Menu.sol";
import "../AddressInput.sol";
import "../ConfirmInput.sol";
import "../Upgradable.sol";
import "../Sdk.sol";

import "itemStructs.sol";
import "IItemList.sol";
import "ITransactable.sol";
import "AHasConstructorWithPubKey.sol";

abstract contract AShoppingListInitDebot is Debot, Upgradable {
        bytes m_icon;

    TvmCell m_shoppinglistCode; // TODO contract code
    address m_address;  // TODO contract address
    ItemsSummary m_itemsSummary;        // Statistics of incompleted and completed items
    uint32 m_itemId;    // Item id for update. I didn't find a way to make this var local
    string m_itemName;  // Item name for update
    uint256 m_masterPubKey; // User pubkey
    address m_msigAddress;  // User wallet address

    uint32 INITIAL_BALANCE =  200000000;  // Initial TODO contract balance


    function setShoppingListCode(TvmCell code) public {
        require(msg.pubkey() == tvm.pubkey(), 101);
        tvm.accept();
        m_shoppinglistCode = code;
    }


    function onError(uint32 sdkError, uint32 exitCode) public {
        Terminal.print(0, format("Operation failed. sdkError {}, exitCode {}", sdkError, exitCode));
        _menu();
    }

    function onSuccess() public view {
        _getStat(tvm.functionId(setStat));
    }

    function start() virtual public override {
        Terminal.input(tvm.functionId(savePublicKey),"Please enter your public key",false);
    }

    function getRequiredInterfaces() public view override returns (uint256[] interfaces) {
        return [ Terminal.ID, Menu.ID, AddressInput.ID, ConfirmInput.ID ];
    }

    function savePublicKey(string value) public {
        (uint res, bool status) = stoi("0x"+value);
        if (status) {
            m_masterPubKey = res;

            Terminal.print(0, "Checking if you already have a Shopping list ...");
            TvmCell deployState = tvm.insertPubkey(m_shoppinglistCode, m_masterPubKey);
            m_address = address.makeAddrStd(0, tvm.hash(deployState));
            Terminal.print(0, format( "Info: your Shopping list contract address is {}", m_address));
            Sdk.getAccountType(tvm.functionId(checkStatus), m_address);

        } else {
            Terminal.input(tvm.functionId(savePublicKey),"Wrong public key. Try again!\nPlease enter your public key",false);
        }
    }


    function checkStatus(int8 acc_type) public {
        if (acc_type == 1) { // acc is active and  contract is already deployed
            _getStat(tvm.functionId(setStat));

        } else if (acc_type == -1)  { // acc is inactive
            Terminal.print(0, "You don't have a TODO list yet, so a new contract with an initial balance of 0.2 tokens will be deployed");
            AddressInput.get(tvm.functionId(creditAccount),"Select a wallet for payment. We will ask you to sign two transactions");

        } else  if (acc_type == 0) { // acc is uninitialized
            Terminal.print(0, format(
                "Deploying new contract. If an error occurs, check if your ShoppingList contract has enough tokens on its balance"
            ));
            deploy();

        } else if (acc_type == 2) {  // acc is frozen
            Terminal.print(0, format("Can not continue: account {} is frozen", m_address));
        }
    }


    function creditAccount(address value) public {
        m_msigAddress = value;
        optional(uint256) pubkey = 0;
        TvmCell empty;
        ITransactable(m_msigAddress).sendTransaction{
            abiVer: 2,
            extMsg: true,
            sign: true,
            pubkey: pubkey,
            time: uint64(now),
            expire: 0,
            callbackId: tvm.functionId(waitBeforeDeploy),
            onErrorId: tvm.functionId(onErrorRepeatCredit)  // Just repeat if something went wrong
        }(m_address, INITIAL_BALANCE, false, 3, empty);
    }

    function onErrorRepeatCredit(uint32 sdkError, uint32 exitCode) public {
        // TODO: check errors if needed.
        sdkError;
        exitCode;
        creditAccount(m_msigAddress);
    }


    function waitBeforeDeploy() public  {
        Sdk.getAccountType(tvm.functionId(checkIfStatusIs0), m_address);
    }

    function checkIfStatusIs0(int8 acc_type) public {
        if (acc_type ==  0) {
            deploy();
        } else {
            waitBeforeDeploy();
        }
    }


    function deploy() private view {
            TvmCell image = tvm.insertPubkey(m_shoppinglistCode, m_masterPubKey);
            optional(uint256) none;
            TvmCell deployMsg = tvm.buildExtMsg({
                abiVer: 2,
                dest: m_address,
                callbackId: tvm.functionId(onSuccess),
                onErrorId:  tvm.functionId(onErrorRepeatDeploy),    // Just repeat if something went wrong
                time: 0,
                expire: 0,
                sign: true,
                pubkey: none,
                stateInit: image,
                call: {AHasConstructorWithPubKey, m_masterPubKey}
            });
            tvm.sendrawmsg(deployMsg, 1);
    }


    function onErrorRepeatDeploy(uint32 sdkError, uint32 exitCode) public view {
        // TODO: check errors if needed.
        sdkError;
        exitCode;
        deploy();
    }

    function setStat(ItemsSummary itemsSummary) public {
        m_itemsSummary = itemsSummary;
        _menu();
    }

    function _menu() virtual internal {
        string sep = '----------------------------------------';
        Menu.select(
            format(
                "You have {}/{}/{} (todo/done/total) items, total price: {}",
                    m_itemsSummary.notBoughtCount,
                    m_itemsSummary.boughtCount,
                    m_itemsSummary.boughtCount + m_itemsSummary.notBoughtCount,
                    m_itemsSummary.totalPrice
            ),
            sep,
            [
                MenuItem("Create new Item","",tvm.functionId(addItem)),
                MenuItem("Show Item list","",tvm.functionId(showItems)),
                MenuItem("Mark item as bought","",tvm.functionId(buyItem)),
                MenuItem("Delete Item","",tvm.functionId(deleteItem))
            ]
        );
    }

    function addItem(uint32 index) public {
        index = index;
        Terminal.input(tvm.functionId(addItem_), "Enter item name", false);
    }

    function addItem_(string name) public {
        m_itemName = name;
        Terminal.input(tvm.functionId(addItem__), "Enter item price", false);
    }

    function addItem__(uint64 count) public view {
        optional(uint256) pubkey = 0;
        IItemList(m_address).addItem{
                abiVer: 2,
                extMsg: true,
                sign: true,
                pubkey: pubkey,
                time: uint64(now),
                expire: 0,
                callbackId: tvm.functionId(onSuccess),
                onErrorId: tvm.functionId(onError)
            }(m_itemName, count);
    }

    function showItems(uint32 index) public view {
        index = index;
        optional(uint256) none;
        IItemList(m_address).getItems{
            abiVer: 2,
            extMsg: true,
            sign: false,
            pubkey: none,
            time: uint64(now),
            expire: 0,
            callbackId: tvm.functionId(showItems_),
            onErrorId: 0
        }();
    }

    function showItems_( Item[] items ) public {
        uint32 i;
        if (items.length > 0 ) {
            Terminal.print(0, "Your items list:");
            for (i = 0; i < items.length; i++) {
                Item Item = items[i];
                string completed;
                if (Item.isBought) {
                    completed = 'âœ“';
                } else {
                    completed = ' ';
                }
                Terminal.print(0, format("{} {}  \"{}\"  at {}", Item.id, completed, Item.name, Item.timestamp));
            }
        } else {
            Terminal.print(0, "Your items list is empty");
        }
        _menu();
    }

    function buyItem(uint32 index) public {
        index = index;
        if (m_itemsSummary.boughtCount + m_itemsSummary.notBoughtCount > 0) {
            Terminal.input(tvm.functionId(buyItem_), "Enter Item number:", false);
        } else {
            Terminal.print(0, "Sorry, you have no items to buy");
            _menu();
        }
    }

    function buyItem_(string value) public {
        (uint256 num,) = stoi(value);
        m_itemId = uint32(num);
        ConfirmInput.get(tvm.functionId(buyItem__),"Enter price");
    }

    function buyItem__(uint256 price) public view {
        optional(uint256) pubkey = 0;
        IItemList(m_address).buyItem{
                abiVer: 2,
                extMsg: true,
                sign: true,
                pubkey: pubkey,
                time: uint64(now),
                expire: 0,
                callbackId: tvm.functionId(onSuccess),
                onErrorId: tvm.functionId(onError)
            }(m_itemId, price);
    }


    function deleteItem(uint32 index) public {
        index = index;
        if (m_itemsSummary.boughtCount + m_itemsSummary.notBoughtCount > 0) {
            Terminal.input(tvm.functionId(deleteItem_), "Enter Item number:", false);
        } else {
            Terminal.print(0, "Sorry, you have no items to delete");
            _menu();
        }
    }

    function deleteItem_(string value) public view {
        (uint256 num,) = stoi(value);
        optional(uint256) pubkey = 0;
        IItemList(m_address).deleteItem{
                abiVer: 2,
                extMsg: true,
                sign: true,
                pubkey: pubkey,
                time: uint64(now),
                expire: 0,
                callbackId: tvm.functionId(onSuccess),
                onErrorId: tvm.functionId(onError)
            }(uint32(num));
    }

    function _getStat(uint32 answerId) private view {
        optional(uint256) none;
        IItemList(m_address).getStat{
            abiVer: 2,
            extMsg: true,
            sign: false,
            pubkey: none,
            time: uint64(now),
            expire: 0,
            callbackId: answerId,
            onErrorId: 0
        }();
    }

    function onCodeUpgrade() internal override {
        tvm.resetStorage();
    }
}
